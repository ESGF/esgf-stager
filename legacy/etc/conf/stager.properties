# ** FTP access server (e.g. HPSS) *********************************************
# ** Sets up the FTP access for the FTPConnectorFactory

# * server data
ftp.serverName=hpss.server.de
ftp.serverPort=1234
ftp.userName=des:asdasdsd
ftp.userPassword=des:asdasdasd
# root directory of ftp server from where files will be served
# (this part of the directory structure will not be copied)
ftp.serverRootDirectory=/ftp/pub

# ** StagerDispatcher **********************************************************
# ** Sets up the dispatcher (redirection, etc)

# Where to redirect in case of interactive access and cache miss
# If a relative path is used, it will be relative to the calling webpage
# which is probably not desired.
redirect=/hpss/hpsswait.jsp

# If set Nothing will get retrieved. Just for debugging/testing purposes.
#dryrun=true

# ** StagerCache ***************************************************************
# ** Sets up the cache
 
# Limit the maximum size of cache (in bytes).
# if set to 0 the maximum available free space at the time of starting the
# application will be used.
#maxCacheSize=105000000

# Limit the maximum number of files in the cache
#maxCacheFiles=1000000000

# local directory where cached files will be held
localDirectory=/tmp/cache

# ** FileGrabber ***************************************************************
# ** Sets up the file grabbing mechanism

# Connector Factory to use for creating the Objects responsible for grabbing the
# files (should be also configured here)
remoteConnectorFactory=esgf.node.stager.io.connectors.FTPConnectorFactory

# Minimal number of threads available for retrieving files
#coreThreads=5

# Maximum number of threads
#maxThreads=10

# minutes after which a thread will starve
#keepAlive=1440


# ** Filter ********************************************************************
# ** Sets up the access url that will get caught and how to extract the file
# ** name from them.

# Defined services (this services trigger a file retrieval command)
filter.service=root,secured

# Filename extraction regex pattern in url 
# (only one capturing group allowed, result=$1)
filter.root.pattern=(.*.nc)
filter.secured.pattern=(.*).htm
